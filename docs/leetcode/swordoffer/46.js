
// 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

// 示例 1:

// 输入: 12258
// 输出: 5
// 解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
//

// 提示：

// 0 <= num < 231

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 12258

// 1，2，2，5，8
// 12，2，5，8
// 1，22，5，8
// 1，2，25，8
// 12，25，8

// dp1 = 1;
// dp2 = 3;
// dp3 = 5;
// dp4 = 7;

// dp1 = 1;
// dp2 = dp1 + 1 + 2 + < 25 ? 1 : 0
// dp3 = dp2 + 1 + < 25 ? 1 : 0

// dp1 = 1; 1
// dp2 = 2; 1,2  12
// dp3 = 3; 1,2,6, 12,6  1,26。
// dp4 = 5; 1,2,2,5   12, 2, 5    1,22,5     3 + 2?  1,2,21     12, 21
// dp5 =  1,2,2,1,8/// 12,2,1,8/// 1,22,1,8// 1,2,21,8// 12,21,  8 +  3

// 这提就是靠手写dp摸出
var translateNum = function (num) {
    var str = num + '';
    var dp = [1];
    dp[-1] = 1;
    for (var i = 1; i < str.length; i++) {
        dp[i] = dp[i - 1];
        if (Number(str[i - 1]) && Number(str[i - 1] + '' + str[i]) < 26) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
    }
    return dp[str.length - 1];
};