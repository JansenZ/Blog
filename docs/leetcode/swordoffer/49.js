// 我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。

//  

// 示例:

// 输入: n = 10
// 输出: 12
// 解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。
// 说明:  

// 1 是丑数。
// n 不超过1690。

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/chou-shu-lcof
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



// 1  2  3  4  5  6  7  8  9  10 12 14 15

// 1, 2, 3, 4, 5, 6, 8, 9, 10, 12


// 4 = 1 * 2 1 *2
// 4 = 1*3 *3*3
// 4 = 1 * 5* 5*5


// 7, 11

// // 这不就是质数不算呗

// 1 2 3 4 = 2 * 2, 5 = 1 * 5, 6 = 2 * 3

function getNum(n) {
    let dp = [1, 2, 3];
    var m2 = 1, m3 = 1, m5 = 5;
    var c1 = 1; c2 = 1; c3 = 1;
    for(var i = 3; i < n; i ++) {
        let cp = dp[i - 1];
        while(m2 <= cp) {
            m2 = 2 * dp[c1];
            c1++;
        }
        while(m3 <= cp) {
            m3= 3 * dp[c2];
            c2++;
        }
        while(m5 <= cp) {
            m5= 5 * dp[c3];
            c3++;
        }
        dp[i] = Math.min(m2, m3, m5);
    }
    return dp[n -1];
}

1, 2, 3。 4 = 1 * 2， 1 * 3， 1* 5
          5 = 2 * 2， 2 * 3， 2 * 5
          6 = 3 * 2， 3* 3， 3* 5


          4 出子2号位的 * 2
          5 出子1号位 * 5
          6 出子3号位 * 2


          8 来自 4 * 2
          9 来自 3 * 3
         10 来自 5 * 2
